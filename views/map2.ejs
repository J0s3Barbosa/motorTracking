<meta
  name="viewport"
  content="initial-scale=1,maximum-scale=1,user-scalable=no"
/>

<style>
  .map {
    height: 600px;
  }
</style>
<script src="https://api.mapbox.com/mapbox-gl-js/v0.53.0/mapbox-gl.js"></script>
<link
  href="https://api.mapbox.com/mapbox-gl-js/v0.53.0/mapbox-gl.css"
  rel="stylesheet"
/>
<!-- mapbox-gl-directions -->
<script src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-directions/v4.0.0/mapbox-gl-directions.js"></script>
<link
  rel="stylesheet"
  href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-directions/v4.0.0/mapbox-gl-directions.css"
  type="text/css"
/>

<script src="/socket.io/socket.io.js"></script>

<span class="lead mb-3">Welcome</span>
<span id="user" class="lead mb-3"> <%= user.name %></span>

<div id="map" class="map"></div>

<script>
  var fillObjs = [];
  var requestDetails = {};
  var req_coordinates = "";
  var req_latitude = "";
  var req_longitude = "";
  var user = document.getElementById("user").textContent;
  var copDetails = {};
  var map, marker, map_first_location;
  var coordList = [];

  var LatLngFromStorage = localStorage.getItem("LatLng");
  LatLng = JSON.parse(LatLngFromStorage);
  console.log("LatLng");
  console.log(LatLng);

  var socket = io();
  socket.emit("join", {
    user: user
  });

  var localStorage_last_coords = localStorage.getItem("last_coords");
  last_coords = JSON.parse(localStorage_last_coords);

  console.log("last_coords");
  console.log(last_coords);

  if (last_coords != null) {
    map_first_location = [LatLng.lng, LatLng.lat];
  } else {
    map_first_location = [0, 0];
  }

  mapboxgl.accessToken =
    "pk.eyJ1IjoiYXBwY2h0byIsImEiOiJjanM2eHppYTQwdjY5M3lvMXRzZXhoN2dxIn0.x08-MqHl0xfqHaWclzvuZw";
  map = new mapboxgl.Map({
    container: "map",
    style: "mapbox://styles/mapbox/streets-v11",
    center: map_first_location, // starting position
    zoom: 18 // starting zoom
  });
  // Add zoom and rotation controls to the map.
  map.addControl(new mapboxgl.NavigationControl());
  map.addControl(new mapboxgl.FullscreenControl());

  // Add geolocate control to the map.
  const geolocate = new mapboxgl.GeolocateControl({
    positionOptions: {
      enableHighAccuracy: true
    },
    trackUserLocation: true,
    showUserLocation: true
  });

  map.addControl(geolocate);

  map.on("load", function(e) {
    geolocate.trigger();
  });

  geolocate.on("geolocate", function(data) {
    var userlocation = geolocate._lastKnownPosition;

    var lat = userlocation.coords.latitude;
    var lng = userlocation.coords.longitude;

    var latLngObjs = {
      lat: "",
      lng: "",
      lastupdate: Date()
    };
    latLngObjs.lat = lat;
    latLngObjs.lng = lng;

    localStorage.setItem("LatLng", JSON.stringify(latLngObjs));

    localStorage.setItem("last_coords", JSON.stringify(latLngObjs));
    console.log("last_coords");
    console.log(last_coords);

    var timer = window.setInterval(function() {
      if (lat != last_coords.lat && lng != last_coords.lng) {
        console.log("Diferent position");

        localStorage.setItem("last_coords", JSON.stringify(latLngObjs));

        console.log("last_coords updated");
        console.log(last_coords);

        localStorage.setItem("coordList", JSON.stringify(latLngObjs));

        var stgetcoordList = localStorage.getItem("coordList");
        coordList.push(JSON.parse(stgetcoordList));

        // coordinates needs to be = lngLat;
        console.log("coordList");
        console.log(coordList);
    var lnglattreated = [LatLng.lng, LatLng.lat];

        marker = new mapboxgl.Marker()
          .setLngLat(lnglattreated)
          .setPopup(
            new mapboxgl.Popup({ offset: 25 }) // add popups
              .setHTML("<h3>" + marker + "</h3><p>" + lnglattreated + "</p>")
          )
          .addTo(map);
      } else {
        console.log("Same location");
      }
    }, 60000);
  });

  // request driver
  requestDetails = {
    citizenId: user,
    location: {
      address: LatLng,
      latitude: LatLng.lat,
      longitude: LatLng.lng
    }
  };

  var stgetcoordList = localStorage.getItem("coordList");
  coordList.push(JSON.parse(stgetcoordList));
  console.log("coordList.length");
  console.log(coordList.length);

  if (coordList != null && coordList.length > 0) {
    console.log("stgetcoordList");
    console.log(stgetcoordList);
    console.log("coordList");
    console.log(coordList);

    coordList.forEach(function(marker) {
      // create a DOM element for the marker
      var el = document.createElement("div");
      el.className = "marker";
      el.style.backgroundImage = "public/images/dog_paw.png";

      el.addEventListener("click", function() {
        window.alert("your dog has been here");
      });

      // add marker to map
      new mapboxgl.Marker(el).setLngLat([marker.lng, marker.lat]).addTo(map);
    });
  }

  map.on("click", function(e) {
    coordinates = e.lngLat;
    // coordinates = lngLat
    console.log("coordinates");
    console.log(coordinates);
    coordList.push(coordinates);
    localStorage.setItem("coordList", JSON.stringify(coordList));

    marker = new mapboxgl.Marker()
      .setLngLat(coordinates)
      .setPopup(
        new mapboxgl.Popup({ offset: 25 }) // add popups
          .setHTML("<h3>" + marker + "</h3><p>" + coordinates + "</p>")
      )
      .addTo(map);
  });
</script>

<style>
  .marker {
    background-image: url("images/dog_paw.png");
    background-size: cover;
    width: 50px;
    height: 50px;
    border-radius: 50%;
    cursor: pointer;
  }
  .mapboxgl-popup {
    max-width: 200px;
  }

  .mapboxgl-popup-content {
    text-align: center;
    font-family: "Open Sans", sans-serif;
  }
</style>
